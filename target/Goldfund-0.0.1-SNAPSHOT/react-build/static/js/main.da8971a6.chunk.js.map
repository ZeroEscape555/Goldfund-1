{"version":3,"sources":["compos/ButtonGroup.tsx","compos/YouButton.tsx","compos/CSDialog.tsx","compos/CSAI.ts","compos/CustomerService.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ButtonGroup","props","className","style","children","YouButton","onClick","tabIndex","CSDialog","textarea","React","useRef","sendMsg","current","value","length","send","focus","logs","useLayoutEffect","scrollTop","scrollHeight","cs","getElementsByClassName","i","text","innerHTML","split","target","forEach","e","test","check","exec","link","slice","push","replace","join","links","addEventListener","call","innerText","display","flexDirection","alignItems","justifyContent","width","height","padding","backgroundColor","borderRadius","boxShadow","key","ref","flex","whiteSpace","marginBottom","overflowY","map","d","from","margin","textAlign","src","alt","border","lineHeight","minWidth","maxWidth","minHeight","wordBreak","content","flexWrap","spellCheck","background","resize","fontFamily","fontSize","onKeyDown","preventDefault","marginTop","window","history","go","marginRight","answers","CustomerService","useState","Object","keys","q","state","setState","msg","curState","concat","setTimeout","Math","random","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.da8971a6.chunk.js","sourcesContent":["/*\r\n * @Author: Kanata You \r\n * @Date: 2020-12-06 16:57:58 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-12-06 17:00:50\r\n */\r\n\r\nimport React from \"react\";\r\n\r\n\r\nexport const ButtonGroup: React.FC<{ style?: React.CSSProperties; }> = props => (\r\n    <div className=\"ButtonGroup\" style={{ ...props.style }} >\r\n        { props.children }\r\n    </div>\r\n);\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-12-06 16:48:21 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-12-23 20:39:42\r\n */\r\n\r\nimport React from \"react\";\r\n\r\n\r\ntype NativeListener<T extends HTMLElement, E extends keyof (\r\n    Required<\r\n        React.DetailedHTMLProps<React.HTMLAttributes<T>, T>\r\n    >\r\n)> = Pick<Required<\r\n    React.DetailedHTMLProps<React.HTMLAttributes<T>, T>\r\n>, E>[E];\r\n\r\ntype DivClickListener = NativeListener<HTMLDivElement, \"onClick\">;\r\n\r\nexport interface YouButtonProps {\r\n    children: string;\r\n    style?: React.CSSProperties;\r\n    onClick: DivClickListener;\r\n};\r\n\r\nexport const YouButton: React.FC<YouButtonProps> = props => (\r\n    <div className=\"YouButton\" style={{ ...props.style }} onClick={ props.onClick }\r\n    tabIndex={ 1 } >\r\n        { props.children }\r\n    </div>\r\n);\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-12-23 20:35:06 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-12-24 21:32:39\r\n */\r\n\r\nimport React, { useLayoutEffect } from \"react\";\r\nimport { ButtonGroup } from \"./ButtonGroup\";\r\nimport { YouButton } from \"./YouButton\";\r\nimport { CSLog } from \"./CustomerService\";\r\n\r\n\r\nexport interface CSDialogProps {\r\n    logs:   CSLog[];\r\n    send:   (msg: string) => void;\r\n    call:   (msg: string) => void;\r\n};\r\n\r\nexport const CSDialog: React.FC<CSDialogProps> = props => {\r\n    const textarea = React.useRef<HTMLTextAreaElement>() as React.RefObject<HTMLTextAreaElement>;\r\n\r\n    const sendMsg = () => {\r\n        if (textarea.current) {\r\n            const value = textarea.current.value;\r\n            if (value.length) {\r\n                props.send(value);\r\n                textarea.current.value = \"\";\r\n            }\r\n            textarea.current.focus();\r\n        }\r\n    };\r\n\r\n    const logs = React.useRef() as React.RefObject<HTMLDivElement>;\r\n    useLayoutEffect(() => {\r\n        if (logs.current) {\r\n            logs.current.scrollTop = logs.current.scrollHeight;\r\n            const cs = logs.current.getElementsByClassName(\"cs\");\r\n            for (let i: number = 0; i < cs.length; i++) {\r\n                const text = cs[i].innerHTML.split(\"\\n\");\r\n                let target: string[] = [];\r\n                text.forEach(e => {\r\n                    if (/!\\(.+\\)/.test(e)) {\r\n                        const check = /!\\(.+\\)/.exec(e)![0];\r\n                        const link = \"<span class='cslink' >\"\r\n                                + check.slice(2, check.length - 1)\r\n                            + \"</span>\";\r\n                        target.push(e.replace(check, link));\r\n                    } else {\r\n                        target.push(e);\r\n                    }\r\n                });\r\n                cs[i].innerHTML = target.join(\"\\n\");\r\n            }\r\n            const links = logs.current.getElementsByClassName(\"cslink\");\r\n            for (let i: number = 0; i < links.length; i++) {\r\n                const link = links[i];\r\n                link.addEventListener(\"click\", e => {\r\n                    props.call((e.target as HTMLSpanElement).innerText);\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"stretch\",\r\n            justifyContent: \"center\",\r\n            width: \"calc(30vw + 260px)\",\r\n            height: \"520px\",\r\n            padding: \"40px 40px 20px\",\r\n            backgroundColor: \"rgb(250,250,250)\",\r\n            borderRadius: \"10px\",\r\n            boxShadow: \"6px 4px 5px rgba(0,0,0,0.2)\"\r\n        }} >\r\n            <div key=\"logs\" ref={ logs } style={{\r\n                flex: 1,\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"stretch\",\r\n                justifyContent: \"flex-start\",\r\n                backgroundColor: \"rgb(240,240,240)\",\r\n                whiteSpace: \"pre-wrap\",\r\n                marginBottom: \"16px\",\r\n                padding: \"0 16px\",\r\n                overflowY: \"scroll\"\r\n            }} >\r\n                {\r\n                    props.logs.map((d, i) => {\r\n                        return d.from === \"cs\" ? (\r\n                            <div key={ i }\r\n                            style={{\r\n                                margin: \"6px 0\",\r\n                                padding: \"0.4em 0\",\r\n                                display: \"flex\",\r\n                                alignItems: \"flex-start\",\r\n                                justifyContent: \"flex-start\",\r\n                                textAlign: \"left\"\r\n                            }} >\r\n                                <img src=\"/images/cs.png\" alt=\"客服\"\r\n                                style={{\r\n                                    width: \"36px\",\r\n                                    height: \"36px\",\r\n                                    borderRadius: \"18px\",\r\n                                    border: \"1px solid rgb(200,200,200)\"\r\n                                }} />\r\n                                <div key=\"content\" className=\"cs\"\r\n                                style={{\r\n                                    backgroundColor: \"rgb(255,255,255)\",\r\n                                    lineHeight: \"1.2em\",\r\n                                    padding: \"0.4em 0.8em\",\r\n                                    minWidth: \"1em\",\r\n                                    maxWidth: \"calc(30vw + 100px)\",\r\n                                    minHeight: \"1.2em\",\r\n                                    wordBreak: \"break-all\",\r\n                                    borderRadius: \"0.8em\",\r\n                                    margin: \"0 10px\",\r\n                                    boxShadow: \"2px 3px 3px rgba(0,0,0,0.2)\"\r\n                                }} >\r\n                                    { d.content }\r\n                                </div>\r\n                            </div>\r\n                        ) : (\r\n                            <div key={ i }\r\n                            style={{\r\n                                margin: \"6px 0\",\r\n                                padding: \"0.4em 0\",\r\n                                display: \"flex\",\r\n                                flexDirection: \"row-reverse\",\r\n                                alignItems: \"flex-start\",\r\n                                justifyContent: \"flex-start\",\r\n                                flexWrap: \"wrap\",\r\n                                textAlign: \"left\"\r\n                            }} >\r\n                                <img src=\"/images/user.png\" alt=\"我\"\r\n                                style={{\r\n                                    width: \"36px\",\r\n                                    height: \"36px\",\r\n                                    borderRadius: \"18px\",\r\n                                    border: \"1px solid rgb(200,200,200)\"\r\n                                }} />\r\n                                <div key=\"content\"\r\n                                style={{\r\n                                    backgroundColor: \"rgb(255,255,255)\",\r\n                                    lineHeight: \"1.2em\",\r\n                                    padding: \"0.4em 0.8em\",\r\n                                    minWidth: \"1em\",\r\n                                    maxWidth: \"calc(30vw + 100px)\",\r\n                                    minHeight: \"1.2em\",\r\n                                    wordBreak: \"break-all\",\r\n                                    borderRadius: \"0.8em\",\r\n                                    margin: \"0 10px\",\r\n                                    boxShadow: \"2px 3px 3px rgba(0,0,0,0.2)\"\r\n                                }} >\r\n                                    { d.content }\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n            <div key=\"inputarea\" style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"stretch\",\r\n                justifyContent: \"center\",\r\n                backgroundColor: \"rgb(240,240,240)\",\r\n                padding: \"6px\"\r\n            }} >\r\n                <textarea ref={ textarea } spellCheck=\"false\" style={{\r\n                    height: \"84px\",\r\n                    background: \"none\",\r\n                    border: \"none\",\r\n                    resize: \"none\",\r\n                    lineHeight: \"1.3em\",\r\n                    fontFamily: 'ubuntu, \"Yu Mincho\", 游明朝, source-code-pro, Menlo, Monaco, '\r\n                        + 'Consolas, \"Courier New\", monospace',\r\n                    fontSize: \"110%\"\r\n                }}\r\n                onKeyDown={\r\n                    e => {\r\n                        if (e.key === \"Enter\") {\r\n                            e.preventDefault();\r\n                            sendMsg();\r\n                        }\r\n                    }\r\n                } />\r\n            </div>\r\n            <ButtonGroup style={{\r\n                marginTop: \"12px\",\r\n                justifyContent: \"flex-end\"\r\n            }} >\r\n                <YouButton key=\"quit\" onClick={ () => { window.history.go(-1); } }\r\n                style={{\r\n                    marginRight: \"20px\"\r\n                }} >\r\n                    返回\r\n                </YouButton>\r\n                <YouButton key=\"send\" onClick={ sendMsg } >\r\n                    发送\r\n                </YouButton>\r\n            </ButtonGroup>\r\n        </div>\r\n    );\r\n};\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-12-24 20:39:10 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-12-24 21:27:03\r\n */\r\n\r\nexport const WelcomeLog = () => {\r\n    return \"您好！我是在线客服机器人。请问有能帮到您？\\n\"\r\n        + \"常见问题：\\n\"\r\n        + Object.keys(answers).map(\r\n            (q, i) => {\r\n                return `\\t${ i + 1 }. !(${ q })`;\r\n            }\r\n        ).join(\"\\n\");\r\n};\r\n\r\nexport const answers = {\r\n    \"账户验证问题\": \"本网站使用密码进行登录验证，您在创建账号时录入的邮箱信息可以作为找回密码的途径。\",\r\n    \"为什么购买产品需要实名验证\": \"依据相关法律法规，购买金融产品需要绑定交易人的实名信息。\"\r\n        + \"在本网站交易时，通过实名验证的账户会自动发送一份购买人的信息收录备案。\",\r\n    \"支付限制\": \"对于每一位实名用户，为保护您的权益，您的支付将会服从一个支付限额，每日的交易不可超出此限额。\",\r\n    \"支付方式问题\": \"本网站目前仅支持支付宝支付。\"\r\n};\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-12-23 19:42:00 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-12-24 21:27:49\r\n */\r\n\r\nimport React from \"react\";\r\nimport { CSDialog } from \"./CSDialog\";\r\nimport { WelcomeLog, answers } from \"./CSAI\";\r\n\r\n\r\nexport type CSLog = {\r\n    from:       \"user\" | \"cs\";\r\n    content:    string;\r\n};\r\n\r\nexport type CustomerServiceState = {\r\n    logs:       CSLog[];\r\n};\r\n\r\nexport const CustomerService: React.FC = () => {\r\n    const [state, setState] = React.useState<CustomerServiceState>({\r\n        logs: [{\r\n            from: \"cs\",\r\n            content: WelcomeLog()\r\n        }]\r\n    });\r\n\r\n    const pushMsg = (msg: string) => {\r\n        const curState = state.logs.concat([{\r\n            from: \"user\",\r\n            content: msg\r\n        }]);\r\n        setState({\r\n            logs: curState\r\n        });\r\n        setTimeout(() => {\r\n            setState({\r\n                logs: curState.concat([{\r\n                    from: \"cs\",\r\n                    content: (answers as any)[msg] || \"对不起，无法回答您的问题，请咨询网站管理员。\"\r\n                }])\r\n            });\r\n        }, Math.random() * 1000 + 400);\r\n    };\r\n\r\n    const call = (msg: string) => {\r\n        const curState = state.logs.concat([{\r\n            from: \"user\",\r\n            content: msg\r\n        }]);\r\n        setState({\r\n            logs: curState\r\n        });\r\n        setTimeout(() => {\r\n            setState({\r\n                logs: curState.concat([{\r\n                    from: \"cs\",\r\n                    content: (answers as any)[msg] || \"对不起，无法回答您的问题，请咨询网站管理员。\"\r\n                }])\r\n            });\r\n        }, Math.random() * 1000 + 400);\r\n    };\r\n\r\n    return (\r\n        <CSDialog logs={ state.logs } send={ pushMsg } call={ call } />\r\n    );\r\n};\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-12-23 19:38:02 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-12-23 19:50:21\r\n */\r\n\r\nimport React from \"react\";\r\nimport { CustomerService } from \"./compos/CustomerService\";\r\n\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <CustomerService />\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*\n * @Author: Kanata You \n * @Date: 2020-12-05 22:45:47 \n * @Last Modified by: Kanata You\n * @Last Modified time: 2020-12-23 19:41:01\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}